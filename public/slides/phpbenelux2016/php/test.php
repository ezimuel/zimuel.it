<?php

function AES_encrypt($text, $key) {
  $ivsize = openssl_cipher_iv_length('aes-256-cbc');
  $iv     = openssl_random_pseudo_bytes($ivsize);

  // Encryption key generated by PBKDF2 (since PHP 5.5)
  $keys    = hash_pbkdf2('sha256', $key, $iv, 10000, 64);
  $encKey  = substr($keys, 0, 32); // 256 bit encryption key
  $hmacKey = substr($keys, 32);    // 256 bit hmac key

  $ciphertext = openssl_encrypt(
    $text,
    'aes-256-cbc',
    $encKey,
    OPENSSL_RAW_DATA,
    $iv
  );
  $hmac = hash_hmac('sha256', $iv . $ciphertext, $hmacKey);
  return $hmac . $iv . $ciphertext;
}

function AES_decrypt($text, $key) {
  $hmac       = substr($text, 0, 64);
  $ivsize     = openssl_cipher_iv_length('aes-256-cbc');
  $iv         = substr($text, 64, $ivsize);
  $ciphertext = substr($text, $ivsize + 64);

  // Generate the encryption and hmac keys
  $keys    = hash_pbkdf2('sha256', $key, $iv, 10000, 64);
  $encKey  = substr($keys, 0, 32); // 256 bit encryption key
  $hmacKey = substr($keys, 32);    // 256 bit hmac key
  $hmacNew = hash_hmac('sha256', $iv . $ciphertext, $hmacKey);
  if (!compareStrings($hmac, $hmacNew)) { // to prevent timing attacks
    return false;
  }
  // Decryption
  return openssl_decrypt(
    $ciphertext,
    'aes-256-cbc',
    $encKey,
    OPENSSL_RAW_DATA,
    $iv
  );
}

function compareStrings($expected, $actual)
{
  $expected    = (string) $expected;
  $actual      = (string) $actual;
  $lenExpected = strlen($expected);
  $lenActual   = strlen($actual);
  $len         = min($lenExpected, $lenActual);

  $result = 0;
  for ($i = 0; $i < $len; $i++) {
    $result |= ord($expected[$i]) ^ ord($actual[$i]);
  }
  $result |= $lenExpected ^ $lenActual;

  return ($result === 0);
}

$text = "Hello World!";
$key  = '1234567890';
$encrypted = AES_encrypt($text, $key);
var_dump($encrypted);
$decrypt = AES_decrypt($encrypted, $key);
var_dump($decrypt);
